// Code generated by mockery v2.45.0. DO NOT EDIT.

package mockapp

import (
	context "context"

	cli "github.com/urfave/cli/v2"

	logger "github.com/sazonovItas/go-moco-proxy/pkg/logger"

	mock "github.com/stretchr/testify/mock"
)

// MockApp is an autogenerated mock type for the App type
type MockApp struct {
	mock.Mock
}

type MockApp_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApp) EXPECT() *MockApp_Expecter {
	return &MockApp_Expecter{mock: &_m.Mock}
}

// CliCommand provides a mock function with given fields:
func (_m *MockApp) CliCommand() *cli.Command {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CliCommand")
	}

	var r0 *cli.Command
	if rf, ok := ret.Get(0).(func() *cli.Command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cli.Command)
		}
	}

	return r0
}

// MockApp_CliCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CliCommand'
type MockApp_CliCommand_Call struct {
	*mock.Call
}

// CliCommand is a helper method to define mock.On call
func (_e *MockApp_Expecter) CliCommand() *MockApp_CliCommand_Call {
	return &MockApp_CliCommand_Call{Call: _e.mock.On("CliCommand")}
}

func (_c *MockApp_CliCommand_Call) Run(run func()) *MockApp_CliCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApp_CliCommand_Call) Return(_a0 *cli.Command) *MockApp_CliCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApp_CliCommand_Call) RunAndReturn(run func() *cli.Command) *MockApp_CliCommand_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function with given fields:
func (_m *MockApp) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockApp_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type MockApp_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *MockApp_Expecter) Context() *MockApp_Context_Call {
	return &MockApp_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *MockApp_Context_Call) Run(run func()) *MockApp_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApp_Context_Call) Return(_a0 context.Context) *MockApp_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApp_Context_Call) RunAndReturn(run func() context.Context) *MockApp_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Logger provides a mock function with given fields:
func (_m *MockApp) Logger() logger.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func() logger.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// MockApp_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type MockApp_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
func (_e *MockApp_Expecter) Logger() *MockApp_Logger_Call {
	return &MockApp_Logger_Call{Call: _e.mock.On("Logger")}
}

func (_c *MockApp_Logger_Call) Run(run func()) *MockApp_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApp_Logger_Call) Return(_a0 logger.Logger) *MockApp_Logger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApp_Logger_Call) RunAndReturn(run func() logger.Logger) *MockApp_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields:
func (_m *MockApp) Run() {
	_m.Called()
}

// MockApp_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockApp_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockApp_Expecter) Run() *MockApp_Run_Call {
	return &MockApp_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockApp_Run_Call) Run(run func()) *MockApp_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApp_Run_Call) Return() *MockApp_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApp_Run_Call) RunAndReturn(run func()) *MockApp_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *MockApp) Shutdown() {
	_m.Called()
}

// MockApp_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockApp_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockApp_Expecter) Shutdown() *MockApp_Shutdown_Call {
	return &MockApp_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockApp_Shutdown_Call) Run(run func()) *MockApp_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApp_Shutdown_Call) Return() *MockApp_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApp_Shutdown_Call) RunAndReturn(run func()) *MockApp_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockApp creates a new instance of MockApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApp {
	mock := &MockApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
